---
# Source: rbc/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: rbc-ecosystem
---
# Source: rbc/charts/ingress-nginx/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: rbc-ingress-nginx
  namespace: default
automountServiceAccountToken: true
---
# Source: rbc/charts/rbc-api/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rbc-mongodb
  namespace: rbc-ecosystem
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-11.1.8
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: rbc-mongodb
---
# Source: rbc/charts/sealed-secrets/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rbc-sealed-secrets
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.6
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.5
---
# Source: rbc/charts/ingress-nginx/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: rbc-ingress-nginx-controller
  namespace: default
data:
  allow-snippet-annotations: "true"
---
# Source: rbc/charts/rbc-api/charts/mongodb/templates/standalone/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: rbc-mongodb
  namespace: rbc-ecosystem
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-11.1.8
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: rbc/charts/ingress-nginx/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
  name: rbc-ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
      - namespaces
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
---
# Source: rbc/charts/sealed-secrets/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secrets-unsealer
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.6
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.5
rules:
  - apiGroups:
      - bitnami.com
    resources:
      - sealedsecrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - bitnami.com
    resources:
      - sealedsecrets/status
    verbs:
      - update
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - create
      - update
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: rbc/charts/ingress-nginx/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
  name: rbc-ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: rbc-ingress-nginx
subjects:
  - kind: ServiceAccount
    name: rbc-ingress-nginx
    namespace: "default"
---
# Source: rbc/charts/sealed-secrets/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rbc-sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.6
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.5
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: secrets-unsealer
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: rbc-sealed-secrets
    namespace: kube-system
---
# Source: rbc/charts/ingress-nginx/templates/controller-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: rbc-ingress-nginx
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: rbc/charts/sealed-secrets/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: rbc-sealed-secrets-key-admin
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.6
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.5
rules:
  - apiGroups:
      - ""
    resourceNames:
      - sealed-secrets-key
    resources:
      - secrets
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
      - list
---
# Source: rbc/charts/sealed-secrets/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: rbc-sealed-secrets-service-proxier
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.6
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.5
rules:
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
  - apiGroups:
      - ""
    resourceNames:
      - 'http:rbc-sealed-secrets:'
      - 'http:rbc-sealed-secrets:http'
      - rbc-sealed-secrets
    resources:
      - services/proxy
    verbs:
      - create
      - get
---
# Source: rbc/charts/ingress-nginx/templates/controller-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: rbc-ingress-nginx
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rbc-ingress-nginx
subjects:
  - kind: ServiceAccount
    name: rbc-ingress-nginx
    namespace: "default"
---
# Source: rbc/charts/sealed-secrets/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rbc-sealed-secrets-key-admin
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.6
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.5
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rbc-sealed-secrets-key-admin
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: rbc-sealed-secrets
    namespace: kube-system
---
# Source: rbc/charts/sealed-secrets/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rbc-sealed-secrets-service-proxier
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.6
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.5
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rbc-sealed-secrets-service-proxier
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
---
# Source: rbc/charts/ingress-nginx/templates/controller-service-webhook.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: rbc-ingress-nginx-controller-admission
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: https-webhook
      port: 443
      targetPort: webhook
      appProtocol: https
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/component: controller
---
# Source: rbc/charts/ingress-nginx/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: rbc-ingress-nginx-controller
  namespace: default
spec:
  type: LoadBalancer
  ipFamilyPolicy: SingleStack
  ipFamilies: 
    - IPv4
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      appProtocol: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
      appProtocol: https
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/component: controller
---
# Source: rbc/charts/rbc-api/charts/mongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: rbc-mongodb
  namespace: rbc-ecosystem
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-11.1.8
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  ports:
    - name: mongodb
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/component: mongodb
---
# Source: rbc/charts/rbc-api/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rbc-api
    app.kubernetes.io/version: 0.1.1
    helm.sh/chart: rbc-api-0.1.15
  name: rbc-rbc-api
  namespace: rbc-ecosystem
spec:
  ports:
  - name: rbc-api
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/name: rbc-api
  type: ClusterIP
---
# Source: rbc/charts/sealed-secrets/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: rbc-sealed-secrets
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.6
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.5
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/instance: rbc
---
# Source: rbc/charts/ingress-nginx/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: rbc-ingress-nginx-controller
  namespace: default
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/instance: rbc
      app.kubernetes.io/component: controller
  replicas: 1
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: rbc
        app.kubernetes.io/component: controller
    spec:
      dnsPolicy: ClusterFirst
      containers:
        - name: controller
          image: "k8s.gcr.io/ingress-nginx/controller:v1.1.3@sha256:31f47c1e202b39fadecf822a9b76370bd4baed199a005b3e7d4d1455f4fd3fe2"
          imagePullPolicy: IfNotPresent
          lifecycle: 
            preStop:
              exec:
                command:
                - /wait-shutdown
          args:
            - /nginx-ingress-controller
            - --publish-service=$(POD_NAMESPACE)/rbc-ingress-nginx-controller
            - --election-id=ingress-controller-leader
            - --controller-class=k8s.io/ingress-nginx
            - --ingress-class=nginx
            - --configmap=$(POD_NAMESPACE)/rbc-ingress-nginx-controller
            - --validating-webhook=:8443
            - --validating-webhook-certificate=/usr/local/certificates/cert
            - --validating-webhook-key=/usr/local/certificates/key
          securityContext: 
            capabilities:
              drop:
              - ALL
              add:
              - NET_BIND_SERVICE
            runAsUser: 101
            allowPrivilegeEscalation: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LD_PRELOAD
              value: /usr/local/lib/libmimalloc.so
          livenessProbe: 
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe: 
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: webhook
              containerPort: 8443
              protocol: TCP
          volumeMounts:
            - name: webhook-cert
              mountPath: /usr/local/certificates/
              readOnly: true
          resources: 
            requests:
              cpu: 100m
              memory: 90Mi
      nodeSelector: 
        kubernetes.io/os: linux
      serviceAccountName: rbc-ingress-nginx
      terminationGracePeriodSeconds: 300
      volumes:
        - name: webhook-cert
          secret:
            secretName: rbc-ingress-nginx-admission
---
# Source: rbc/charts/rbc-api/charts/mongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rbc-mongodb
  namespace: rbc-ecosystem
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-11.1.8
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: rbc
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-11.1.8
        app.kubernetes.io/instance: rbc
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: rbc-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/instance: rbc
                    app.kubernetes.io/component: mongodb
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:4.4.13-debian-10-r48
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MONGODB_EXTRA_USERNAMES
              value: "rbc-api"
            - name: MONGODB_EXTRA_DATABASES
              value: "rbc-api"
            - name: MONGODB_EXTRA_PASSWORDS
              valueFrom:
                secretKeyRef:
                  name: rbc-api-mongodb
                  key: mongodb-passwords
            - name: MONGODB_ROOT_USER
              value: "root"
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rbc-api-mongodb
                  key: mongodb-root-password
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            exec:
              command:
                - mongo
                - --disableImplicitSessions
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - |
                  # Run the proper check depending on the version
                  [[ $(mongo --version | grep "MongoDB shell") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
                  . /opt/bitnami/scripts/libversion.sh
                  VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
                  VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
                  VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
                  if [[ "$VERSION_MAJOR" -ge 4 ]] && [[ "$VERSION_MINOR" -ge 4 ]] && [[ "$VERSION_PATCH" -ge 2 ]]; then
                      mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
                  else
                      mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'
                  fi
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
      volumes:
        - name: datadir
          persistentVolumeClaim:
            claimName: rbc-mongodb
---
# Source: rbc/charts/rbc-api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rbc-api
    app.kubernetes.io/version: 0.1.1
    helm.sh/chart: rbc-api-0.1.15
  name: rbc-rbc-api
  namespace: rbc-ecosystem
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: rbc
      app.kubernetes.io/name: rbc-api
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: rbc
        app.kubernetes.io/name: rbc-api
    spec:
      containers:
      - env:
        - name: RBC_SVC_PORT
          value: "3000"
        - name: RBC_APP_NAME
          value: rbc-api
        - name: RBC_RELEASE_NAME
          value: rbc
        - name: RBC_RELEASE_NAMESPACE
          value: default
        - name: RBC_UMBRELLA_RELEASE_NAME
          value: rbc
        - name: RBC_MONGODB_PORT
          value: "27017"
        - name: RBC_MONGODB_DATABASE
          value: rbc-api
        - name: RBC_MONGODB_USERNAME
          value: rbc-api
        - name: RBC_MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mongodb-passwords
              name: rbc-api-mongodb
        - name: RBC_DEBUG
          value: "true"
        image: curioushuman/rbc-api:0.1.1
        imagePullPolicy: IfNotPresent
        name: rbc-api
        ports:
        - containerPort: 3000
          name: rbc-api
          protocol: TCP
        resources: {}
        securityContext: {}
      securityContext: {}
      serviceAccountName: default
---
# Source: rbc/charts/sealed-secrets/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rbc-sealed-secrets
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.6
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.5
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: sealed-secrets
      app.kubernetes.io/instance: rbc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sealed-secrets
        app.kubernetes.io/instance: rbc
    spec:
      securityContext:
        fsGroup: 65534
      serviceAccountName: rbc-sealed-secrets
      containers:
        - name: controller
          command:
            - controller
          args:
            - --update-status
            - --key-prefix
            - "sealed-secrets-key"
          image: docker.io/bitnami/sealed-secrets-controller:v0.17.5
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /healthz
              port: http
          resources:
            limits: {}
            requests: {}
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          volumeMounts:
            - mountPath: /tmp
              name: tmp
      volumes:
        - name: tmp
          emptyDir: {}
---
# Source: rbc/charts/ingress-nginx/templates/controller-ingressclass.yaml
# We don't support namespaced ingressClass yet
# So a ClusterRole and a ClusterRoleBinding is required
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: nginx
spec:
  controller: k8s.io/ingress-nginx
---
# Source: rbc/charts/rbc-api/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
  labels:
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rbc-api
    app.kubernetes.io/version: 0.1.1
    helm.sh/chart: rbc-api-0.1.15
  name: rbc-rbc-api
  namespace: rbc-ecosystem
spec:
  ingressClassName: nginx
  rules:
  - host: rbc.dev
    http:
      paths:
      - backend:
          service:
            name: rbc-rbc-api
            port:
              number: 3000
        path: /api/?(.*)
        pathType: Prefix
---
# Source: rbc/charts/rbc-api/templates/secrets/rbc-api-mongodb.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  annotations:
    sealedsecrets.bitnami.com/cluster-wide: "true"
  creationTimestamp: null
  name: rbc-api-mongodb
  namespace: rbc-ecosystem
spec:
  encryptedData:
    mongodb-passwords: AgDdwX0Cp0AactUyol8WAtSGsQ4SitVsJiFgp+epMMLaceac2iQ8MeZI8Jtu4JnzVaZnyCNuLf5pg9tVqVr12PKhn3+zjsF2GVd9nVJKBo3GvPESTsv3RRj1hEd8qjKqHdgBUpZ0XT00yIWOmgbjx5EzGsJBxoPeepRF9mAbq2IB9x0p0hgtCeXh3Ho+Fl1cc4nuitiC0CAaKYjq2Id3GnZ9Ktl2dOUo1mJClPbC0/4caUOU8T1cHGwEuCWT2nuKNFR960KIqsVJimy/P3fIErk8epWMK0wa103zactLi1ABuwvLmjpez5Y4/5mCwKYvirJdZv3Irpx530f6i/wLlNKWwNDuXE0C5Bafb6RmMSVG8bGa2DSDs0WkjfO/tspD1D/dRVkY/We6iIaHOhy5KghWUwR4CP/RTKUfy3AZ1HmaTi+5Q5BdBsaw+rfukBSxJ2GeCkyW2cEAD+i00KPYqsvTq3Bdlh8M0CB5AsXIiUNIGA4u3BI52j893DDnGPLb5RM6HO1CZeUyRgOOk7CBiP2YX/luqq7CrCpJR2dAzVVkaF0B1ZZJbNRs4ZByvnexS12f/mAfVHsVE2KClla5uM85h/0JxGafeOjlNt2UWjNjGEvB/Uya1zQ90hj+7F5zxtbFFVI+5DGSCdNXJ+sa7Eb8OLxnU3EYDDQvtTlLaE6iarY7Pk5Y3SODTYVN54bUXOF7FUthuDx014pSgUXauXezyw==
    mongodb-replica-set-key: AgCQJ+ZaxfSpqq1gNp4AkLsnWUBn7b4/zhJuxvfjCmAMBMlGWdbLTCjZga4zOJYeoeuf8j4leQ+iHGM/WTw9L7D5zSlCBbNHKSYGFzpn6eshXZ65ww16lxkUc5hglyX7s0Fotl1kixRer4CTMfpI2aKL2QRdInymDh9Mga322jtrpcweCulJFr6OOTkh77AYUFVPFzcQZzVVllkEax+7ds9TcMrf/CkdJNW3vgQ+XT9hiws/3KQeOfeXmB9OVaD2lwTSqnmcLKodA107AU/TcmhSbRXyLjYriagmaAtIZ/mvf6dehQ8PMcm668Ch5jZfBzRU6BE5/PTFTKA7DWkAIHTTOFWgjjRE1KU1ULr97HHvsbHgWFBHGBwXPoc/kxO5jqEguU3J2GG5IdUXDtTz/6IAGqHgisCtGnXBnvfrcJTpwlebh1TkHqEks1MhjkkP5ZbaoAwBKM6VKoPbhj7sAZ1Qu/w1B0tc6gk4e2qoF2Uj16tnjlq/4R+kBz6JHVbvp3ep/sQFuNSeAGlUS3mXeHbFQGJPmPLz461zeyw7mMugi6vghlyjBW5NSInw7jtwUtFwi6mvQGZsmLrtssBHjiDKTdUJ9Tp+VICAYckr55x62mh91sOcor6fuoF2U0rr2/DCYYnjNEGjpTkWkfQVI7kmKVxGeP0fMJhl78gIRHP1VtRzRu7ImP5v8sS7fFfy7ucRnEDhEWspE+MUQu/qp7Hkf0B0/GZ4TrVC47DViFltigOnrG4j8Qwj4gwnCQ==
    mongodb-root-password: AgAjkyR/49q3BUP+ZVwAXtU7PtIOyPi1RMXKeS4ULXA7Q3onqfjGdQY5ONRCKuf/q6m7TASzd1grJ+0Ne3/IKNngpcxScFLuJ0tuMNDfBMgeiYejkWkWgGav91R6sfJiJa4JHYgrxQidGnoWIsICiyeZnRXprryKcu3Z4U1IOTnnrY65z2oc7nTcTdi3FR1GQBMheZelXT2iEoxxEtAya9iNotmeVhgw8a9bnm4D/dFPKdY2/a/t7LzIPmgEfWPN68iYCfUMRm8seLsHC5P+mKAgUs52zXWNHIBzZnV3Y4p4zTotQCnpX70ngEGDD0p7SU3KeEmQoXm65hd/4LKoINpJp+fSSIRlO02NqzQvrtRCuYduYxT5lf/aLFO8kfONairTKyKITCUa1YKOZl2gCxE8xHmuMh0rM18ZEEDGuYn0MgeJgU2UiTgmZiYcUOsRX3WzunOXNiRUvtSBiyz0itHjtS1vzMDiEZvm07V9a3peU0G3uX7iuxLZLdDxwnVYua6o51q15oQQdRpqgfHoyZVyTMvW4Jc+kbYctC117EyAeK2q05wlB/yIdggsNDFD95cvGQ7advVC28MFgCyvb3z/2kq56WM+9Bc9mrGDVA/ab6XMmBYOypPaxB4UundMRfpCfnkqX35L/JO+vQaoOl0r8xR0ZB81zmCNXR8NWKxqdFDogT4qLbfFfUcVYefnNe7aC0Sh4bK3qFBVdkg5TIE3
  template:
    data: null
    metadata:
      annotations:
        sealedsecrets.bitnami.com/cluster-wide: "true"
      creationTimestamp: null
      name: rbc-api-mongodb
      namespace: rbc-ecosystem
---
# Source: rbc/charts/ingress-nginx/templates/admission-webhooks/validating-webhook.yaml
# before changing this value, check the required kubernetes version
# https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#prerequisites
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
  name: rbc-ingress-nginx-admission
webhooks:
  - name: validate.nginx.ingress.kubernetes.io
    matchPolicy: Equivalent
    rules:
      - apiGroups:
          - networking.k8s.io
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - ingresses
    failurePolicy: Fail
    sideEffects: None
    admissionReviewVersions:
      - v1
    clientConfig:
      service:
        namespace: "default"
        name: rbc-ingress-nginx-controller-admission
        path: /networking/v1/ingresses
---
# Source: rbc/charts/ingress-nginx/templates/admission-webhooks/job-patch/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rbc-ingress-nginx-admission
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
---
# Source: rbc/charts/ingress-nginx/templates/admission-webhooks/job-patch/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: rbc-ingress-nginx-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    verbs:
      - get
      - update
---
# Source: rbc/charts/ingress-nginx/templates/admission-webhooks/job-patch/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name:  rbc-ingress-nginx-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: rbc-ingress-nginx-admission
subjects:
  - kind: ServiceAccount
    name: rbc-ingress-nginx-admission
    namespace: "default"
---
# Source: rbc/charts/ingress-nginx/templates/admission-webhooks/job-patch/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name:  rbc-ingress-nginx-admission
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
---
# Source: rbc/charts/ingress-nginx/templates/admission-webhooks/job-patch/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rbc-ingress-nginx-admission
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rbc-ingress-nginx-admission
subjects:
  - kind: ServiceAccount
    name: rbc-ingress-nginx-admission
    namespace: "default"
---
# Source: rbc/charts/ingress-nginx/templates/admission-webhooks/job-patch/job-createSecret.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: rbc-ingress-nginx-admission-create
  namespace: default
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  template:
    metadata:
      name: rbc-ingress-nginx-admission-create
      labels:
        helm.sh/chart: ingress-nginx-4.0.19
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: rbc
        app.kubernetes.io/version: "1.1.3"
        app.kubernetes.io/part-of: ingress-nginx
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: create
          image: "k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660"
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=rbc-ingress-nginx-controller-admission,rbc-ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
            - --namespace=$(POD_NAMESPACE)
            - --secret-name=rbc-ingress-nginx-admission
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext:
            allowPrivilegeEscalation: false
      restartPolicy: OnFailure
      serviceAccountName: rbc-ingress-nginx-admission
      nodeSelector: 
        kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
        fsGroup: 2000
---
# Source: rbc/charts/ingress-nginx/templates/admission-webhooks/job-patch/job-patchWebhook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: rbc-ingress-nginx-admission-patch
  namespace: default
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-4.0.19
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/version: "1.1.3"
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  template:
    metadata:
      name: rbc-ingress-nginx-admission-patch
      labels:
        helm.sh/chart: ingress-nginx-4.0.19
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: rbc
        app.kubernetes.io/version: "1.1.3"
        app.kubernetes.io/part-of: ingress-nginx
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: patch
          image: "k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660"
          imagePullPolicy: IfNotPresent
          args:
            - patch
            - --webhook-name=rbc-ingress-nginx-admission
            - --namespace=$(POD_NAMESPACE)
            - --patch-mutating=false
            - --secret-name=rbc-ingress-nginx-admission
            - --patch-failure-policy=Fail
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext:
            allowPrivilegeEscalation: false
      restartPolicy: OnFailure
      serviceAccountName: rbc-ingress-nginx-admission
      nodeSelector: 
        kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
        fsGroup: 2000
