---
# Source: rbc/charts/rbc-api/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rbc-mongodb
  namespace: rbc
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-11.1.5
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: rbc-mongodb
---
# Source: rbc/charts/sealed-secrets/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rbc-sealed-secrets
  namespace: rbc
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.5
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.4
---
# Source: rbc/charts/rbc-api/charts/mongodb/templates/standalone/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: rbc-mongodb
  namespace: rbc
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-11.1.5
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: rbc/charts/sealed-secrets/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secrets-unsealer
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.5
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.4
rules:
  - apiGroups:
      - bitnami.com
    resources:
      - sealedsecrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - bitnami.com
    resources:
      - sealedsecrets/status
    verbs:
      - update
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - create
      - update
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: rbc/charts/sealed-secrets/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rbc-sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.5
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.4
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: secrets-unsealer
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: rbc-sealed-secrets
    namespace: rbc
---
# Source: rbc/charts/sealed-secrets/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: rbc-sealed-secrets-key-admin
  namespace: rbc
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.5
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.4
rules:
  - apiGroups:
      - ""
    resourceNames:
      - sealed-secrets-key
    resources:
      - secrets
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
      - list
---
# Source: rbc/charts/sealed-secrets/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: rbc-sealed-secrets-service-proxier
  namespace: rbc
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.5
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.4
rules:
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
  - apiGroups:
      - ""
    resourceNames:
      - 'http:rbc-sealed-secrets:'
      - 'http:rbc-sealed-secrets:http'
      - rbc-sealed-secrets
    resources:
      - services/proxy
    verbs:
      - create
      - get
---
# Source: rbc/charts/sealed-secrets/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rbc-sealed-secrets-key-admin
  namespace: rbc
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.5
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.4
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rbc-sealed-secrets-key-admin
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: rbc-sealed-secrets
    namespace: rbc
---
# Source: rbc/charts/sealed-secrets/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rbc-sealed-secrets-service-proxier
  namespace: rbc
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.5
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.4
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rbc-sealed-secrets-service-proxier
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
---
# Source: rbc/charts/rbc-api/charts/mongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: rbc-mongodb
  namespace: rbc
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-11.1.5
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  ports:
    - name: mongodb
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/component: mongodb
---
# Source: rbc/charts/rbc-api/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rbc-api
    app.kubernetes.io/version: 0.1.1
    helm.sh/chart: rbc-api-0.1.12
  name: rbc-rbc-api
spec:
  ports:
  - name: rbc-api
    port: 3000
    protocol: TCP
    targetPort: rbc-api
  selector:
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/name: rbc-api
  type: ClusterIP
---
# Source: rbc/charts/sealed-secrets/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: rbc-sealed-secrets
  namespace: rbc
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.5
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.4
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/instance: rbc
---
# Source: rbc/charts/rbc-api/charts/mongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rbc-mongodb
  namespace: rbc
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-11.1.5
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: rbc
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-11.1.5
        app.kubernetes.io/instance: rbc
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: rbc-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/instance: rbc
                    app.kubernetes.io/component: mongodb
                namespaces:
                  - "rbc"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:4.4.13-debian-10-r33
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MONGODB_EXTRA_USERNAMES
              value: "rbc-api"
            - name: MONGODB_EXTRA_DATABASES
              value: "rbc-api"
            - name: MONGODB_EXTRA_PASSWORDS
              valueFrom:
                secretKeyRef:
                  name: rbc-api-mongodb-auth
                  key: mongodb-passwords
            - name: MONGODB_ROOT_USER
              value: "root"
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rbc-api-mongodb-auth
                  key: mongodb-root-password
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            exec:
              command:
                - mongo
                - --disableImplicitSessions
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - |
                  # Run the proper check depending on the version
                  [[ $(mongo --version | grep "MongoDB shell") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
                  . /opt/bitnami/scripts/libversion.sh
                  VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
                  VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
                  VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
                  if [[ "$VERSION_MAJOR" -ge 4 ]] && [[ "$VERSION_MINOR" -ge 4 ]] && [[ "$VERSION_PATCH" -ge 2 ]]; then
                      mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
                  else
                      mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'
                  fi
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
      volumes:
        - name: datadir
          persistentVolumeClaim:
            claimName: rbc-mongodb
---
# Source: rbc/charts/rbc-api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rbc-api
    app.kubernetes.io/version: 0.1.1
    helm.sh/chart: rbc-api-0.1.12
  name: rbc-rbc-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: rbc
      app.kubernetes.io/name: rbc-api
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: rbc
        app.kubernetes.io/name: rbc-api
    spec:
      containers:
      - env:
        - name: RBC_SVC_PORT
          value: "3000"
        - name: RBC_APP_NAME
          value: rbc-api
        - name: RBC_RELEASE_NAME
          value: rbc
        - name: RBC_RELEASE_NAMESPACE
          value: rbc
        - name: RBC_UMBRELLA_RELEASE_NAME
          value: rbc
        - name: RBC_MONGODB_PORT
          value: "27017"
        - name: RBC_MONGODB_DATABASE
          value: rbc-api
        - name: RBC_MONGODB_USERNAME
          value: rbc-api
        - name: RBC_MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mongodb-passwords
              name: rbc-api-mongodb-auth
        - name: RBC_DEBUG
          value: "true"
        image: curioushuman/rbc-api:0.1.1
        imagePullPolicy: IfNotPresent
        name: rbc-api
        ports:
        - containerPort: 3000
          name: rbc-api
          protocol: TCP
        resources: {}
        securityContext: {}
      securityContext: {}
      serviceAccountName: default
---
# Source: rbc/charts/sealed-secrets/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rbc-sealed-secrets
  namespace: rbc
  labels:
    app.kubernetes.io/name: sealed-secrets
    helm.sh/chart: sealed-secrets-2.1.5
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: v0.17.4
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: sealed-secrets
      app.kubernetes.io/instance: rbc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sealed-secrets
        app.kubernetes.io/instance: rbc
    spec:
      securityContext:
        fsGroup: 65534
      serviceAccountName: rbc-sealed-secrets
      containers:
        - name: controller
          command:
            - controller
          args:
            - --update-status
            - --key-prefix
            - "sealed-secrets-key"
          image: quay.io/bitnami/sealed-secrets-controller:v0.17.4
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /healthz
              port: http
          resources:
            limits: {}
            requests: {}
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          volumeMounts:
            - mountPath: /tmp
              name: tmp
      volumes:
        - name: tmp
          emptyDir: {}
---
# Source: rbc/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: "true"
  labels:
    app.kubernetes.io/instance: rbc
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rbc
    helm.sh/chart: rbc-0.3.4
  name: rbc
spec:
  rules:
  - host: rbc.dev
    http:
      paths:
      - backend:
          service:
            name: rbc-api
            port:
              number: 3000
        path: /api/?(.*)
        pathType: Prefix
---
# Source: rbc/charts/rbc-api/templates/secrets/mongodb-auth.yaml
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: rbc-api-mongodb-auth
  namespace: rbc
spec:
  encryptedData:
    mongodb-passwords: AgAzMogPJ6dLaQvcXENiAdTc+xh0JLac1cjTpRRyRHg3Ekik42xl9wUMLHPja9dehKCbJqf8W8ws2cNzG/LfYOxTYqUUhDmDWXQOvsvdDMW3kvLAKnfI8FLlMG+a1rpA8coiDlq+teJl3tUn3G0IsSSNKttYqa57RC3ud4wT1Fq2fbvkPwAhBepMx45F/9YrZ4uDSNGUePAsFPuyZB5vuMvczFrMmpkxyYv4DDCEHMi53KU1jf9zoRG99hgSQ6uAT2ba9IPYtaHdDQyeWP26gl6RsG9Z/cgemEJH0tTXKNf48B2eoOaKVwpYr6FB1VGCgaPY1MsydVMywLZBrFQRDOr1/Tp+J+qZ8Fl2+wVUVfwcvSNOVVnT8YtvSxl/ZQQ5GBvMwPPDv8dS08gw15RmzqD6Eg3A36WSWidRZdNCp4E8ciqXlfdm5T6/n3t4r3iWHyp+anNAuPoe/wMTMaRsfQ9Ze9dSOUY0NZJs4IlSYtprYoBdZSQNndBvjza/gxyLIq3Cg2mpAqlBQW8Q779jO7hvTvNKxwSUOyzGWPLh/11qvza5/8b1kLRAjIRQJ/0V5w6/0RT30+nptnkbus5y8SVyqSUD+JdBHJBHfRTq8zSu6jp8nrBW5G8x0e8qiB1+GxEhd50ee3PVQ02D3lg4ZITO8ioySVXjDbLDXbEWerfb1Iwik5eqBkyaR7nti17VBOIphjWzbxv0mxqdncGecW6S/g==
    mongodb-replica-set-key: AgAI2R51Z1AOSI2DjidkIb0Qu4mb6+7USjMGBrrO4IiLFEav25e1rHGOFbY08PjvGSLSF7yHmKSJvhZrVt1feA727N65fiPv42U7hdY25vKVDA4cqGgtg+x7wMpFnqFb2aJnl3SptCuPNj9UxzlG0HMUfH5sBtvpd78RBhKZGtBvaP9xGVt8GBhD0kXdyLQUSdwj0gAIS2Zw/8Nx1S9jhCjpZUVyGuFLbmpNrkz4WZTpMe/E1CtVJODmvD2FbyOVWjSVpO3gR5pL5gSm2mrRYAWj1csGqiQ2LxRicv15U6vEN9N8AyRebyIEhkfdHB7UYMwOGc0HGlbCKtFLmIwlQNjyVhizRCXNTH1+sXUZjqi9X+Hk4SOFWYXzKMPKFz2kfbnBihqH59gWFqL561Y+MGvFndQsfEgXsm8KA9zKi5p8WNUFFr9eARz+ExnLEZSvCAFZi3SfsTyX863dsK86OajtpPQ5lm9VpmcWqrkcOy5Gr7Cvtk3LkNMNmIECAFPayHvvebz7S1Z4onZNEZKQS1esvaMZbj/lWJVecwpvzwtZtrSAEswzIWJnHF0Zm4zWlHMzDdAbRjZuMzNKKELrF4jM3HxpRmWKdm6QyOOCAfHj9fKkMNo0UP/EFAgYXHgbdPJco6+ciuTp+ME3G0FtgOAtHDQl2k5BikQYTefh4h6rtOb+Hw7z7SGw7jKGAVpLViI9M1NTXGst0TcolAaBU9/XjaGLae/qvJusuODY6KsVCQUlJyVPZMJFcY3hvw==
    mongodb-root-password: AgCqFeZa91HnLUFT3xp1z+ZVq8zHfH8uqW9NCXJ7Jf+wsX1hMsXqeH50h0UGnoMiQpP24tY3rYE7fdodzeyZmzIb3/McMbN/7hB2xukRimI+GOcFiLvwymKuNlufxO598napj72vIUP/MJCetnLsGooMqnQ7sYSAnhPnZncLownhsdFWLbOpKWHkAcYztl8ujSsf79aMDm1VbYy7bYd/TKhDsyLAUza6OMALMaBcRlyIQyP3O4Pm3DcnXRmG8+BelOWkx/d1n+azkHYWiWCBwd+Ibvf4TRHM4Jyjs/UBFaeoeiNMI9wwtqZ0MVoWzWGCVJF5Sej/vCVIA7auenhvix3k7Z63ef29pYjtdRnz97k1kYNBFqAq1ZbvVFtF6/ZfePgHYf8houD30H3Tdo32Yaceey2yU4w1nzoBQNhiWO7zmHXXarZhGvdqgc+zi1f/C9+HM9NGG0bESjIJU+cTZcU9HaW+V+W5GQ6vzfjdGdXBDNev9LaOV1Qnee5Q2p32kKCyNlUAJgq1mlOZ9cP+WRWtUYD9WNWsspXwr1dQLK42asF3QB+t0LAKOjzgs7l+vjYKtns4/k1qyXiVCj66MgVqLlXQluBm60o8RbKqTuHCfRDCqhq2O/YyJi1yyT/emaLSIeCqGw449Ehgn2ZnBjrTQbV7EqLwuU0h61OyKaM29qeQQTddpKbsPN5VARsUuWqHLnObSNSWXHvcBDKPMQsq
  template:
    data: null
    metadata:
      creationTimestamp: null
      name: rbc-api-mongodb-auth
      namespace: rbc
